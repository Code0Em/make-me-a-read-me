// **GLOBAL VARIABLES**
// Task 10: Object containing userAnswers.build options and build badges markdown.
// *CREDIT: Code for most badges and links copied from Ileriayo (2023) Badges for your personal developer branding, profile, and projects · GitHub (https://github.com/Ileriayo/markdown-badges). Badges generated by Shields.io (no date) Static Badge (https://shields.io/badges).
const builtWith = {
  Bootstrap: `![Bootstrap](https://img.shields.io/badge/bootstrap-%238511FA.svg?style=for-the-badge&logo=bootstrap&logoColor=white) `,
  CSS: `![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)`,
  HTML: `![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white) `,
  Javascript: `![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)`,
  jQuery: `![jQuery](https://img.shields.io/badge/jquery-%230769AD.svg?style=for-the-badge&logo=jquery&logoColor=white)`,
  'Node.js': `![NodeJS](https://img.shields.io/badge/node.js-6DA55F?style=for-the-badge&logo=node.js&logoColor=white)`,
  NPM: `![NPM](https://img.shields.io/badge/NPM-%23CB3837.svg?style=for-the-badge&logo=npm&logoColor=white)`,
  'API(s)': `![API](https://img.shields.io/badge/API(s)-FF1B2D?style=for-the-badge)`,
  'Other(s)': `![Other](https://img.shields.io/badge/Other(s)-7D4698?style=for-the-badge)`
}

// Task 10: Empty array for build badges markdown.
const badges = [];

// **FUNCTIONS**
// Task 10: Creates build badges (for readme) (passing through user's answer to prompts).
const makeBuildBadges = (userAnswers) => {
  // *CREDIT: Code adapted from Xpert Learning Assistant’s (2024) answer to “how to iterate over an array and within this iterate over an object's keys”.
  // Iterates over the values in the array containing the user's answers to the build prompt.
  for (const value of userAnswers.build) {
    // Iterates over the keys of the builtWith object.
    for (const key in builtWith) {
      // If the value (from the userAnswers.build array) matches the key from the builtWith object, run this codeblock:
      if (value == key) {
        // Pushes the corresponding key's value (i.e. badge markdown code) up to the badges array.
        badges.push(`${builtWith[key]}`);
      }
    }
  }
  // Concatenates items in badges array and returns a new string (ergo removing commas).
  return badges.join(" ");
};

// Task 9: Creates license badges (for readme) (passing through user's answer to prompts).
// *CREDIT: Code for most badges and links copied from lukas-h (2022) Markdown License Badges for your Project · GitHub (https://gist.github.com/lukas-h/2a5d00690736b4c3a7ba). Badges generated by Shields.io (no date) Static Badge (https://shields.io/badges).
const makeLicenseBadges = (userAnswers) => {
  // If expression is true, run this codeblock:
  switch (true) {
    // If userAnswers is equal to this license, run this codeblock:
    case (userAnswers === 'Apache license 2.0'):
      // Returns the license badge and link to that license.
      return '[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)';
    case (userAnswers === 'GNU General Public License v3.0'):
      return '[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)';
    case (userAnswers === 'MIT'):
      return '[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)';
    case (userAnswers === 'BSD 2-clause "Simplified" license'):
      return '[![License](https://img.shields.io/badge/License-BSD_2--Clause-orange.svg)](https://opensource.org/licenses/BSD-2-Clause)';
    case (userAnswers === 'BSD 3-clause "New" or "Revised" license'):
      return '[![License](https://img.shields.io/badge/License-BSD_3--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)';
    case (userAnswers === 'Boost Software License 1.0'):
      return '[![License](https://img.shields.io/badge/License-Boost_1.0-lightblue.svg)](https://opensource.org/license/bsl-1-0/)';
    case (userAnswers === 'Creative Commons Zero v1.0 Universal'):
      return '[![License: CC0-1.0](https://licensebuttons.net/l/zero/1.0/80x15.png)](http://creativecommons.org/publicdomain/zero/1.0/)';
    case (userAnswers === 'Eclipse Public License 2.0'):
      return '[![License](https://img.shields.io/badge/License-EPL_2.0-red.svg)](https://opensource.org/license/epl-2-0)';
    case (userAnswers === 'GNU Affero General Public License v3.0'):
      return '[![License: AGPL v3](https://img.shields.io/badge/License-AGPL_v3-blue.svg)](https://www.gnu.org/licenses/agpl-3.0)';
    case (userAnswers === 'GNU General Public License v2.0'):
      return '[![License: GPL v2](https://img.shields.io/badge/License-GPL_v2-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html)';
    case (userAnswers === 'GNU Lesser General Public License v3'):
      return '[![License: LGPL v3](https://img.shields.io/badge/License-LGPL_v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0)';
    case (userAnswers === 'Mozilla Public License 2.0'):
      return '[![License: MPL 2.0](https://img.shields.io/badge/License-MPL_2.0-brightgreen.svg)](https://opensource.org/licenses/MPL-2.0)';
    case (userAnswers === 'The Unlicense'):
      return '[![License: Unlicense](https://img.shields.io/badge/license-Unlicense-blue.svg)](http://unlicense.org/)';
    // If none of the above cases are true, run this codeblock:
    default:
      // Returns an error message.
      return "Error: No license badge found.";
  }
};

// TASK 4: Creates the content of the readme (passing through user's answers to prompts).
const makeReadme = (userAnswers) => {
  return `# ${userAnswers.title}

  ## Contents

* [Description](#description)
* [Build](#build)
* [Installation](#installation)
* [Usage](#usage)
* [Credits](#credits)
* [License](#license)
* [Contributions](#contributions)
* [Testing](#testing)
* [Contacts](#contacts)

## Description
${userAnswers.description}

## Build
The project was built with:

${makeBuildBadges(userAnswers)}

 ## Installation
 ${userAnswers.installation}

## Usage
${userAnswers.usage}

## Credits
${userAnswers.credits}

## License
${makeLicenseBadges(userAnswers.license)}

Select the badge to view more information about the license.

## Contributions
${userAnswers.contribution}

## Testing
${userAnswers.testing}

## Contacts

You can contact the developer on:

*GitHub: [${userAnswers.github}](https://github.com/${userAnswers.github})

*Email: [${userAnswers.github}'s email](mailto:${userAnswers.email})`
};

// **EXPORTS**
// TASK 5: Exports to main js file
module.exports = makeReadme;
